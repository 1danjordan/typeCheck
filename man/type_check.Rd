% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/package.R
\name{type_check}
\alias{type_check}
\title{Add type checks to annotated code}
\usage{
type_check(x, where = c("arguments", "body", "return"))
}
\arguments{
\item{x}{The function or expression to be modified}

\item{where}{The location to add type checks in a function, defaults to
adding them everywhere (if annotations exist).}
}
\value{
The modified code, if the input is a function the returned object
has class \sQuote{checked_function} and the print method print the original
function definition rather than the modified code. If you would like to
inspect the modified code use \code{body(x)}.
}
\description{
This function adds type checking to code annotated with types.
}
\examples{
library(types)
type.unary <- type_define(
  check = function(x) length(x) == 1,
  error = function(n, v, t) sprintf("`\%s` has length `\%s`, not `1`", n, length(v)))
type.numeric <- type_define( check = function(x) is.numeric(x))
type.equals_one <- type_define(
  check = function(x) x == 1,
  error = function(n, v, t) sprintf("`\%s` equals `\%s`, not `1`", n, deparse(v)))
f <- function(blah = ? unary) { blah ? numeric } ? equals_one
ff <- type_check(f)

ff(1)
\dontrun{
 ff(1:2) # `blah` has length `2`, not `1`
 ff("txt") # `blah` is a `character` not a `numeric`
 ff(2) # `f1\\(\\)` equals `2`, not `1`
}
}
