% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/package.R
\name{type_define}
\alias{type_define}
\title{Define a new type}
\usage{
type_define(check = function(x) TRUE, error = function(obj_name, obj_value,
  type) {     sprintf("`\%s` is a `\%s` not a `\%s`.", obj_name, if
  (is.object(obj_value))          class(obj_value)[[1L]]     else
  typeof(obj_value), type) }, document = character(),
  machine_type = character(), ...)
}
\arguments{
\item{check}{A checking function to apply if that type is specified (optional). The
function is passed one argument, the value of the object.}

\item{error}{An error function to apply if the check fails.
(optional). The function is passed the object name and value in two arguments.}

\item{document}{A character vector that contains the documentation
annotation for the type, optional and currently unused.}

\item{machine_type}{A character vector that contains the machine type annotation
for the type, optional and currently unused.}

\item{...}{Additional optional fields.}
}
\description{
Define a new type
}
\examples{
type.character <- type_define( check = is.character)
type.integer <- type_define( check = is.integer)
prefix <- type_check(function(str = ? character, len = ? integer) {
  substring(str, 1, len)
})
\dontrun{
 prefix(10, 1), # `str` is a `double` not a `character`
 prefix("foo", NULL), # `len` is a `NULL` not a `integer`
}
}

